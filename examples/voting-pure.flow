// Based on: https://github.com/WayneJz/COMP6452-19T1/blob/master/Assignment_1/contracts/message.sol

contract LunchVote {
    // These are "consumable" because we can self-destruct, and consume all of these resources.
    // That's fine, because these resources don't have any meaning outside of the contract, so there's no need to preserve them.
    type Voter is nonfungible consumable asset address
    source voterSource of Voter

    type LunchName is nonfungible consumable asset string
    source lunchNameSource of LunchName

    quorum : nat
    voteAcceptedCount : nat
    maxVote : nat

    contractCreator : address

    // A linking is like a mapping, but is bidirectional, so you can do something like lunchChoices.linkedTo(voter),
    //  which will return which key is linked to the SET containing voter.
    //  This is a useful operation: you don't need a separate mapping keeping track of the same information,
    //  which would require several operations to make a single change; this is what the reference implementation of ERC-721
    //  does, which I would guess introduces more potential for errors.
    // Unsure about the name "linking", but I think it's decent because it's similar to mapping, but not the same, so
    //  developers will not assume that it works the same.
    //  - Naming issues:
    //      - "set linking"/SetLinking sounds weird, and doesn't immediately suggest the intended semantics.
    //      - We could have "mapping", which works like in Solidity, and call a "set linking" simply a "linking"
    //          - This is good because "mapping" will work exactly like in Solidity, so developers won't have to learn anything new.
    //          - But "linking" doesn't suggest that the values are an entire SET of values.
    //          - For that matter, neither does "set linking", as discussed above.
    //          - But at least it's weird enough that people will probably think twice before blindly using it...
    lunchChoices : set linking LunchName with Voter

    // Alternate syntax options:
    lunchChoices : set linking LunchName to Voter
    lunchChoices : linking LunchName (set Voter)
    lunchChoices : linking[LunchName, set Voter]
    // An symbol-version, emphasize the bidirectionality of the structure.
    // Use <-|-> isntead of <-> or <--> to signal there's no connection between this and the flow operators, introduced below.
    lunchChoices : LunchName <-|-> set Voter
    lunchChoices : LunchName <-|-> Voter // looks like a single name maps to a single voter

    authorizedVoters : set Voter

    // This is a sort of ad-hoc way to represent states using flows
    // Using this because it works better with flows than having a boolean field.
    // Maybe we should have a real state system like Obsidian's
    CurrentlyVoting : set address
    VotingFinished : set address

    on create(quorumSet : nat):
        // Not sure exactly how to treat constants---are they storages or selectors?
        // Below, they're treated as whichever one would be appropriate, which seems to work.
        flow everything from true to voteAcceptable
        flow true from boolSource to voteAcceptable

        flow everything from quorumSet to quorum
        flow msg.sender from voterSource to authorizedVoters
        flow everything from msg.sender to contractCreator
        flow this.address from addressSource to Voting

        // Operator version, now the selector goes in the middle---it's an edge label.
        // The follow 'modes' of flow can be used:
        // --- x --> means "flow x" (default operation, standard way of writing arrows)
        //  - Could also do --> x --> (with both arrows the same)
        // ~~> means "merge" (similar to flow, so written similarly)
        // >-> means "hold" (not sure what to use for this one)
        // No "consume" arrow, because it works differently than all the others: there's no destination.
        true --- everything --> voteAcceptable
        quorumSet --> quorum
        voterSource --- msg.sender --> authorizedVoters
        msg.sender ~~> contractCreator
        this.address >-> CurrentlyVoting

        // Another version, but where X -> Y is an abbreviation for X -> everything -> Y
        true --> voteAcceptable
        quorumSet --> quorum
        voterSource --- msg.sender --> authorizedVoters
        msg.sender ~~> contractCreator
        this.address >-> CurrentlyVoting

        // Yet another alternate version, putting the destination on the LHS, which is more typical for assignment
        voteAcceptable <-- true
        quorumSet <-- quorum
        authorizedVoters <-- msg.sender --- voterSource
        contractCreator <~~ msg.sender
        CurrentlyVoting <-< this.address

    transaction choiceCreator(choicesToAdd : set string):
        only when contractCreator = msg.sender then
            for each choice in choicesToAdd:
                var name : LunchName
                lunchNameSource --- choice --> name
                (link name with {}) >-> lunchChoices

                // Altenate versions of the previous line:
                lunchChoices <-< link name with {}
                (name <-> {}) >-> lunchChoices
                hold (name <-> {}) in lunchChoices
                hold (link name with {}) in lunchChoices

    transaction authorizeVoter(newVoterAddress : address):
        only when contractCreator = msg.sender then
            voterSource --- newVoterAddress --> authorizedVoters

        // NOTE: If we wanted to be "super pure", we can implement precondition with just flows by doing something like:
        consume true from { contractCreator = msg.sender }
        // This works because { contractCreator = msg.sender } : set bool (specifically, a singleton), so
        //  if `contractCreator = msg.sender` doesn't evaluate to true, then we will fail to consume true from it.
        // I don't think actually doing this is a good idea (at least, in the surface language. Maybe it would simplify the compiler?), but it's interesting/entertaining.

    view getChoices() of set string := { name | (link name with voters) in lunchVotes }

    view getResult() of (string, set (string, nat)) :=
        if this.address in CurrentlyVoting then
            return ("Voting still in progress! You can only use 'getChoices' function.", {})
        else
            let winners : set (string, nat) :=
                { (name, total voters) | (link name with voters) in lunchVotes, total voters = maxVote }

            if total winners > 1 then
                return ("The lunch vote has multiple tie winners:", winners)
            else
                return ("The winner is:", winners)

    transaction vote(voterChoice : string) returns string:
        only when this.address in CurrentlyVoting then
            authorizedVoters --- msg.sender --> lunchChoices[voterChoice]

            // This is an awkward way to do assignment, so a "pure flow" language probably isn't a good idea.
            // TODO: maybe this is just the wrong way to write this piece of code in this sort of language?
            if total lunchChoices[voterChoice] > maxVote then
                (total lunchChoices[voterChoice] - maxVote) --> maxVote

            // authorizedVoters stores all the voters who are allowed to vote, but have not yet voted.
            // So total Voter - total authorizedVoters is the number of voters who have voted.
            if (total Voter - total authorizedVoters) >= quorum then
                CurrentlyVoting --- this.address --> VotingFinished

            return "Vote accepted."

    transaction deconstructor():
        only when msg.sender = contractCreator then
            // Sends all ether from this contract to msg.sender
            // Additionally, because merge destroys the source, there will be no way to finish this transaction without doing `consume this`
            // Any "pack" operation would require all fields be consistent, and, in particular, not destroyed.
            this.balance ~~> msg.sender.balance

            // Consume all resources, include ourselves (a self-destruct).
            // In addition to self-destructing, this acts as a check that only consumable resources are held by this contract at this point.
            consume this
}

