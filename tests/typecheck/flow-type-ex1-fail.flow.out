  <generatedTop>
    <common>
      <k>
        y accepts ! nat ~> update ( y , typeof ( y ) +Ty ! ) ~> drop ( y ) ~> drop ( x ) ~> .
      </k>
      <contracts>
        Main |-> contract Main { .Decls }
      </contracts>
      <fields>
        Main |-> .Set
      </fields>
      <constructors>
        Main |-> constructor ( .VarDefs , pass )
      </constructors>
      <functions>
        .Map
      </functions>
      <types>
        address |-> modified ( SetItem ( consumable )
        SetItem ( nonfungible ) , address )
        bool |-> modified ( SetItem ( consumable )
        SetItem ( nonfungible ) , bool )
        nat |-> modified ( SetItem ( consumable )
        SetItem ( fungible ) , nat )
        string |-> modified ( SetItem ( consumable )
        SetItem ( nonfungible ) , string )
      </types>
      <freshCounter>
        0
      </freshCounter>
    </common>
    <typeEnv>
      x |-> empty nat
      y |-> ! string
    </typeEnv>
  </generatedTop>
#And
  {
    ?Q
  #Equals
    !
  }
#And
  {
    ?R
  #Equals
    every
  }
#And
  {
    ?Tau
  #Equals
    ! nat
  }
