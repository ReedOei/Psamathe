mod FLOW is
    protecting QID .
    protecting NAT .

    sorts TyQuant BaseTy Ty Source Dest Stmt Mod Mods .

    subsort Mod < Mods .

    sorts Loc Locs .
    subsort Qid < Loc < Locs .
    subsort Loc < Source .
    subsort Loc < Dest .

    op _._ : Loc Qid -> Loc [ctor] .
    ops True False : -> Loc [ctor] .

    op nil : -> Locs [ctor] .
    op _,_ : Locs Locs -> Locs [ctor assoc id: nil] .

    op mt : -> Mods [ctor] .
    op __ : Mods Mods -> Mods [ctor comm assoc id: mt] .

    ops empty any one nonempty every : -> TyQuant [ctor] .
    op bool : -> BaseTy [ctor] .
    op v : Qid -> BaseTy [ctor] .
    op t : Qid Mods BaseTy -> BaseTy [ctor] .
    op list : Ty -> BaseTy [ctor] .

    op __ : TyQuant BaseTy -> Ty [ctor] .

    op emptylist : -> Source [ctor] .
    op [_] : Loc -> Source [ctor] .
    op new : Qid Mods BaseTy -> Source [ctor] .

    op consume : -> Dest [ctor] .
    op var_:_ : Qid Ty -> Dest [ctor] .

    op _--[__:_st_(_)]->_ : Source TyQuant Qid Ty Qid Locs Dest -> Stmt [ctor] .
    op _--[__:_st_(_)]->_(_)-->_ : Source TyQuant Qid Ty Qid Locs Qid Locs Dest -> Stmt [ctor] .

    vars T T1 T2 : BaseTy .
    vars Tau Sigma Pi : Ty .
    vars Q R : TyQuant .
    vars X Y Z Alpha Beta : Qid .
    var M : Mod .
    var Ms : Mods .
    var A S : Source .
    var B D : Dest .
endm

red (True --[ one 'x : one bool st 'idBool(nil) ]-> var 'b : one bool) .

