// This is the "readable" version of the hashmap example.
// Most of the abbreviations should be expandable with relatively simple macros and/or type inference.
// This version uses the "locators", which resolve into locations at runtime

// Note that this is only **kind of** a hashmap (the time complexities are wrong, because there's no nth operation to give constant time list lookup).

type Entry is {
    key : nat,
    value : nat
}

type Bucket is {
    hash : nat,
    entries : any list Entry
}

type HashMap is list Bucket

transformer hash(k : nat) -> hashed : nat {
    k --> hashed
}

transformer emptyMap() -> res : empty HashMap {
    [] --> res
}

transformer hasHash(k : nat, bucket : Bucket) -> res : bool {
    k --> hash() --> var hashed : nat
    (hashed in [ bucket.hash ]) --> res

    // abbreviates

    /* try { */
    /*     [ bucket.hash ] --[ hashed ]-> bucket.hash */
    /*     true --> res */
    /* } catch { */
    /*     false --> res */
    /* } */
}

transformer hasKey(k : nat, entry : Entry) -> res : bool {
    (k in [ entry.key ]) --> res

    // abbreviates

    /* try { */
    /*     [ entry.key ] --[ k ]-> entry.key */
    /*     true --> res */
    /* } catch { */
    /*     false --> res */
    /* } */
}

transformer insert(m : any HashMap, k : nat, v : nat) -> res : nonempty HashMap {
    var newEntry : Entry <-- new Entry(k, v)
    try {
        // If the hash already appears in the map
        [ newEntry ] --> ( @entries <-[ ! such that hasHash(k) ]-- m )
        // Alternate version with the destination locator arrows going the other way. I slightly prefer the first one, even though it changes direction.
        [ newEntry ] --> ( m --[ ! such that hasHash(k) ]-> @entries )
    } catch {
        // Otherwise we need to construct a new entry holding just the newly inserted key-value pair.
        [ new Bucket(hash(k), [ newEntry ]) ] --> m
    }
    m --> res
}

// This is "select" in the Psamathe sense, meaning it returns the new value and the new map without the key-value pair.
// In this case, this is not necessary, because nats aren't assets, but in general you wouldn't want to just delete the value in the map.
transformer select(m : any HashMap, k : nat) -> res : { newMap : any HashMap, v : nat } {
    // Extract the entry we care about. This will fail if the entry is not present.
    var v : nat <-- @value <-[ ! such that hasKey(k) ]-- @entries <-[ ! such that hashHash(k) ]-- m
    { newMap |-> m, v |-> v } --> res
}

;

