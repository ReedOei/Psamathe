type Token is fungible asset nat

type Bid is {
    sender : one address,
    amount : any Token
}

transformer id(b : any bool) -> res : any bool {
    b --> res
}

// TODO: If we want to make the pure-flow language practical, we'll need to be able to optimize code like this
transformer invert(b : any bool) -> res : any bool {
    try {
        b --[ true ]-> res
    } catch {}
}

transformer transfer(balances : any map one address => any nat, src : one address, amount : any nat, dst : one address) {
    balances[src] --[ amount ]-> balances[dst]
}

transformer transferTok(balances : any map one address => any Token, src : one address, amount : any nat, dst : one address) {
    balances[src] --[ amount ]-> balances[dst]
}

1 --> var x : nat
4 --> var y : nat
x --> y

[ any nat ; ] --> var m : map any nat => any nat
[ any nat ; { key : any nat |-> 0, value : any nat |-> x } ] --> m

try {
    4 --> y
} catch {
    5 --> y
}

false --> var b : bool

[ any nat ; 1,2,3 ] --> var nums : list any nat

nums --[ [ any nat; 4, 12 ] ]-> var dest : list any nat

[ any nat ; 4,5,6] --[ [ any nat ; 4 ] ]-> dest

[ any bool ; true,false] --[ any such that id() ]-> var bs : list any bool

y --[ 2 ]-> var z : nat

64 --> new Token() --> var myToks : Token

2 --> new Bid(0x0) --> var myBid : Bid

[ any bool ; true, false] --> invert() --> var bs2 : list any bool

