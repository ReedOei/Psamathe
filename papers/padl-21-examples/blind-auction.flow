type Bid is consumable asset {
  sender : address,
  blindedBid : bytes,
  deposit : ether
}
type Reveal is { value : nat, secret : bytes }
type Auction is asset {
  biddingEnd : nat, revealEnd : nat, ended : bool,
  bids : map address => list Bid,
  highestBidder : address, highestBid : ether,
  pendingReturns : map address => ether
}
transformer reveal(this : Auction, reveals : list Reveal) {
  only when biddingEnd <= now and now <= revealEnd
  zip(this.bids[msg.sender], reveals) |\label{line:auction-pipeline-start}|
    --[ any such that _.fst.blindedBid = keccak256(_.snd) ] |\label{line:auction-check-bid}|
    --> this.revealBid(_.fst, _.snd) |\label{line:auction-pipeline-end}|
}
transformer revealBid(this : Auction, bid : Bid, reveal : Reveal) {
  try {
    only when reveal.value >= this.highestBid
    this.highestBid --> this.pendingReturns[highestBidder]
    bid.deposit --[ reveal.value ]-> this.highestBid
    bid.sender --> this.highestBidder
  } catch {}
  bid.deposit --> bid.sender.balance
  bid --> consume
}
