<generatedTop>
  <common>
    <k>
      .
    </k>
    <contracts>
      Main |-> contract Main { type Name is nonfungible  consumable  asset  .Decls string  .Decls }
    </contracts>
    <fields>
      Main |-> .Set
    </fields>
    <constructors>
      Main |-> constructor ( .VarDefs , pass )
    </constructors>
    <transactions>
      .Map
    </transactions>
    <types>
      Main . Name |-> modified ( SetItem ( asset )
      SetItem ( consumable )
      SetItem ( nonfungible ) , string )
      address |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , address )
      bool |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , bool )
      nat |-> modified ( SetItem ( consumable )
      SetItem ( fungible ) , nat )
      string |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , string )
    </types>
    <log>
      ListItem ( #ostream ( 1 ) )
      ListItem ( "on" )
      ListItem ( #buffer ( "" ) )
    </log>
  </common>
  <storage>
    loc ( 1 ) |-> resource ( one nat , 0 )
    loc ( 2 ) |-> resource ( one nat , 1 )
    loc ( 3 ) |-> resource ( one nat , 0 )
    loc ( 4 ) |-> resource ( set string , SetItem ( "bar" ) )
    loc ( 5 ) |-> resource ( set string , SetItem ( "foo" ) )
  </storage>
  <lookup>
    A |-> loc ( 1 )
    B |-> loc ( 2 )
    C |-> loc ( 3 )
    D |-> loc ( 4 )
    E |-> loc ( 5 )
    x |-> loc ( 6 )
  </lookup>
  <localTypeEnv>
    A |-> one nat
    B |-> one nat
    C |-> one nat
    D |-> set string
    E |-> set string
    x |-> one Main
  </localTypeEnv>
  <currentContract>
    contract ( NoContract , NoContract )
  </currentContract>
  <activations>
    .Set
  </activations>
</generatedTop>

