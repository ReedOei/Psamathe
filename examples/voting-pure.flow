type Voter is unique immutable asset address
type ProposalName is unique immutable asset string

type State is {
    chairperson : address,
    eligibleVoters : list Voter,
    proposals : list { name : ProposalName, voters : list Voter }
}

// Alternate, more database-like version
type State is {
    chairperson : address,
    eligibleVoters : table {
        voterRecord : Voter [key]
    },

    // This is written as a table of tables, could compile into two separate tables, and use an id to link them.
    proposals : table {
        name : ProposalName [key],

        voters : table {
            voterRecord : Voter [key]
        }
    }
}

transaction giveRightToVote(this : State, sender : address, voter : address) -> res : State {
    // Ensure we were called by the chairperson
    [ this.chairperson ] --[ sender ]-> this.chairperson

    [ new Voter(voter) ] --> this.voters
    this --> res
}

transaction vote(this : State, sender : address, proposalName : string) -> res : State {
    this.voters --[ sender ]-> this.proposals[! such that hasName(proposalName)].voters
    // Alternative: Use different syntax for filtering operations
    this.voters --[ sender ]-> this.proposals[! .name = proposalName].voters
    // Alternative: SQL-style
    // This uses "locate...in" instead of "select...from" b/c it evaluates to the location, and doesn't return the value like select would
    this.voters --[ sender ]-> ( locate ! proposal
                                 in this.proposals
                                 where name = proposalName
                               ).voters

    this --> res
}

