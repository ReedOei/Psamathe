fmod IDENTIFIER is
    protecting QID .

    sort Id .
    subsort Qid < Id .

    op _._ : Id Id -> Id [ctor assoc ] .
endfm

fmod RECORD is
    protecting IDENTIFIER .
    protecting NAT .

    sort Val .
    --- Should be everything in the language, but just for testing purposes.
    subsort Nat < Val .
    subsort Qid < Val .
    subsort Record < Val .

    sort Field Fields Record .
    subsort Field < Fields .

    op _|->_ : Qid Val -> Field [ctor prec 80] .
    op mt : -> Fields [ctor] .
    op _,_ : Fields Fields -> Fields [ctor prec 90 assoc comm id: mt] .

    op {_} : Fields -> Record [ctor] .

    op _._ : Record Qid -> Val .

    vars Q R S : Qid .
    vars V V1 V2 : Val .
    vars Fs : Fields .

    eq { Q |-> V, Fs }. Q = V .
endfm

fmod LINK is
    protecting QID .
    protecting RECORD .

    sort Qids .
    subsort Qid < Qids .

    op mt : -> Qids [ctor] .
    op _or_ : Qids Qids -> Qids [ctor assoc comm id: mt] .

    sort Link .

    op _id.by_ : Record Qids -> Link [ctor] .

    op _ids_ : Field Link -> Bool .

    vars F F1 F2 : Qid .
    vars V V1 V2 : Val .
    vars Fs : Fields .
    vars Ids : Qids .

    eq (F |-> V) ids ({ F |-> V, Fs } id.by (F or Ids)) = true .
    eq (F |-> V) ids { Fs } id.by Ids = false [owise] .
endfm

--- red (('name |-> 1) ids { 'name |-> 1, 'balance |-> 0 } id.by 'name) == true .
--- red (('balance |-> 0) ids { 'name |-> 1, 'balance |-> 0 } id.by 'name) == false .

fth COLLECTION is
    protecting BOOL .
    including TRIV .
    sort Col .
    subsort Elt < Col .

    op empty : -> Col .
    op __ : Col Col -> Col [assoc id: empty] .
    op select : Col Col -> Col .
    op contains : Col Col -> Bool .
    op canContain : Col Col -> Bool .
endfth

fmod LINKING{K :: TRIV, C :: COLLECTION} is
    sort Link{K, C} Linking{K, C} .
    subsort Link{K, C} < Linking{K, C} .

    vars Lk : Link{K, C} .

    op _<=>_ : K$Elt C$Col -> Link{K, C} [ctor] .
    op mt : -> Linking{K, C} [ctor] .
    op __ : Linking{K, C} Linking{K, C} -> Linking{K, C} [ctor comm assoc id: mt] .

    --- Merge links with the same key.
    eq (K <=> C) (K <=> D) = (K <=> (C D)) .

    vars K K1 K2 : K$Elt .
    vars L M : Linking{K, C} .
    vars C D : C$Col .
    vars V V1 V2 : C$Elt .

    op _[_] : Linking{K, C} K$Elt -> C$Col .
    eq ((K <=> C) L)[K] = C .

    op _.ownerOf(_) : Linking{K, C} C$Elt -> K$Elt .
    eq ((K <=> (C V D)) L).ownerOf(V) = K .

    op _.hasOwner(_) : Linking{K, C} C$Elt -> Bool .
    eq ((K <=> (C V D)) L).hasOwner(V) = true .
    eq L .hasOwner(V) = false [owise] .

    op _.values() : Linking{K, C} -> C$Col .
    eq mt .values() = empty .
    eq ((K <=> C) L).values() = C L .values() .
endfm

fmod NAT-LIST-COL is
    protecting NAT-LIST .

    vars N M : Nat .
    vars L L1 L2 : NatList .

    op select : NatList NatList -> NatList .
    eq select(L, nil) = L .
    eq select(L1 N L2, N L) = select(L1 L2, L) .
    eq select(L1, N L) = select(L1, L) [owise] .

    op contains : NatList NatList -> Bool .
    eq contains(L, nil) = true .
    eq contains(L1 N L2, N L) = contains(L1 L2, L) .
    eq contains(L1, N L) = contains(L1, L) [owise] .

    op canContain : NatList NatList -> Bool .
    eq canContain(L1, L2) = true .
endfm

view NatList from COLLECTION to NAT-LIST-COL is
    sort Elt to Nat .
    sort Col to NatList .

    op empty to nil .
endv

fmod LINKING-NAT-NAT-LIST is
    protecting LINKING{Nat, NatList} .
endfm

--- These two just are supposed to run with no syntax errors
--- red mt .
--- red ((1 <=> nil) (2 <=> (3 4 5 6))) .
--- red ((1 <=> nil) (2 <=> (3 4 5 6)))[2] == (3 4 5 6) .
--- red ((1 <=> nil) (2 <=> (3 4 5 6))).ownerOf(5) == 2 .
--- red ((1 <=> nil) (2 <=> (3 4 5 6)))(5 <=> 10) == ((1 <=> nil) (2 <=> (3 4 5 6)) (5 <=> 10)) .
--- red ((1 <=> nil) (2 <=> (3 4 5 6)))(1 <=> 2) == ((1 <=> 2) (2 <=> (3 4 5 6))) .

