contract owned {
    owner stores address

    on create():
        owner := msg.sender

    transaction transferOwnership(newOwner: address):
        only when msg.sender = owner then
            owner := newOwner
}

// Not sure how to handle this yet
interface tokenRecipient {
    transaction receiveApproval(_from : address, _value : uint256, _token : address, _extraData : bytes);
}

contract TokenERC20 {
    asset token := fungible uint256
    source tokenSource of token
    sink tokenSink for token

    // Public variables of the token
    name stores string
    symbol stores string
    decimals stores uint256

    // This creates an array with all balances
    balanceOf stores token by address
    allowance stores uint256 by (address, address)

    // This generates a public event on the blockchain that will notify clients
    // event Transfer(address indexed from, address indexed to, uint256 value);

    // This generates a public event on the blockchain that will notify clients
    // event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    // This notifies clients about the amount burnt
    // event Burn(address indexed from, uint256 value);

    /**
     * Constrctor function
     *
     * Initializes contract with initial supply tokens to the creator of the contract
     */
    on create(initialSupply : uint256, tokenName : string, tokenSymbol : string): {
        decimals := 18
        totalSupply := initialSupply * 10 ** uint256(decimals)  // Update total supply with the decimal amount
        flow totalSupply from tokenSource to balanceOf[msg.sender] // Give the creator all initial tokens
        name := tokenName                                       // Set the name for display purposes
        symbol := tokenSymbol                                   // Set the symbol for display purposes
    }

    /**
     * Internal transfer, only can be called by this contract
     */
    internal transaction _transfer(_from : address, _to : address, _value : uint256)
        only when _to != 0x0 then
            flow _value from balanceOf[_from] to balanceOf[_to]

    /**
     * Transfer tokens
     *
     * Send `_value` tokens to `_to` from your account
     *
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    transaction transfer(_to : address, _value : uint256):
        _transfer(msg.sender, _to, _value)

    /**
     * Transfer tokens from other address
     *
     * Send `_value` tokens to `_to` in behalf of `_from`
     *
     * @param _from The address of the sender
     * @param _to The address of the recipient
     * @param _value the amount to send
     */
    transaction transferFrom(_from : address, _to : address, _value : uint256):
        flow _value from allowance[_from][msg.sender] to uint256s
        _transfer(_from, _to, _value)

    /**
     * Set allowance for other address
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     */
    transaction approve(_spender : address, _value : uint256):
        allowance[msg.sender][_spender] := _value
        // emit Approval(msg.sender, _spender, _value);

    /**
     * Set allowance for other address and notify
     *
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it
     *
     * @param _spender The address authorized to spend
     * @param _value the max amount they can spend
     * @param _extraData some extra information to send to the approved contract
     */
    transaction approveAndCall(_spender : address, _value : uint256, _extraData : bytes):
        only when approve(_spender, _value) then
            tokenRecipient(_spender).receiveApproval(msg.sender, _value, address(this), _extraData)

    /**
     * Destroy tokens
     *
     * Remove `_value` tokens from the system irreversibly
     *
     * @param _value the amount of money to burn
     */
    transaction burn(_value : uint256):
        flow _value from balanceOf[msg.sender] to tokenSink
        // emit Burn(msg.sender, _value);

    /**
     * Destroy tokens from other account
     *
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.
     *
     * @param _from the address of the sender
     * @param _value the amount of money to burn
     */
    transaction burnFrom(_from : address, _value : uint256):
        flow _value from allowance[_from][msg.sender] to uint256s
        flow _value from balanceOf[_from] to tokenSink
        // emit Burn(_from, _value);
}

/******************************************/
/*       ADVANCED TOKEN STARTS HERE       */
/******************************************/

contract MyAdvancedToken is owned, TokenERC20 {
    sellPrice stores uint256
    buyPrice stores uint256

    frozen stores Set address

    /* This generates a public event on the blockchain that will notify clients */
    // event FrozenFunds(address target, bool frozen);

    /* Initializes contract with initial supply tokens to the creator of the contract */
    on create(
        uint256 initialSupply,
        string memory tokenName,
        string memory tokenSymbol
    ) TokenERC20(initialSupply, tokenName, tokenSymbol): {}

    /* Internal transfer, only can be called by this contract */
    internal transaction _transfer(_from : address, _to : address, _value : uint256):
        only when _to != 0x0 and _from not in frozen and _to not in frozen then
            flow _value from balances[_from] to balances[_to]
            // emit Transfer(_from, _to, _value);

    /// @notice Create `mintedAmount` tokens and send it to `target`
    /// @param target Address to receive the tokens
    /// @param mintedAmount the amount of tokens it will receive
    transaction mintToken(target : address, mintedAmount : uint256):
        only when msg.sender = owner then
            flow mintedAmount from tokenSource to balanceOf[target]
            // emit Transfer(address(0), address(this), mintedAmount);
            // emit Transfer(address(this), target, mintedAmount);

    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
    /// @param target Address to be frozen
    /// @param freeze either to freeze it or not
    transaction freezeAccount(target : address, freeze : bool)
        only when msg.sender = owner then
            if freeze then
                flow target from addresses to frozen
                // emit FrozenFunds(target, freeze);
            else
                flow target from frozen to addresses
                // emit FrozenFunds(target, freeze);

    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth
    /// @param newSellPrice Price the users can sell to the contract
    /// @param newBuyPrice Price users can buy from the contract
    transaction setPrices(newSellPrice : uint256, newBuyPrice : uint256):
        only when msg.sender = owner then
            sellPrice := newSellPrice
            buyPrice := newBuyPrice

    /// @notice Buy tokens from contract by sending ether
    transaction buy(value stores ether):
        flow everything from value to this.balance
        let amount := msg.value / buyPrice                 // calculates the amount
        _transfer(address(this), msg.sender, amount)       // makes the transfers

    /// @notice Sell `amount` tokens to contract
    /// @param amount amount of tokens to be sold
    transaction sell(amount : uint256):
        let etherAmount := amount * sellPrice
        _transfer(msg.sender, address(this), amount)       // makes the transfers
        flow etherAmount from this.balance to msg.sender.balance // sends ether to the seller. It's important to do this last to avoid recursion attacks
}

