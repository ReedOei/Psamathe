mod FLOW is
    protecting QID .
    protecting NAT .
    protecting CONVERSION .

    sorts Flow List Map Env .

    sort Val .
    subsort Val < List .

    sorts Loc Locator .
    subsort Qid < Locator < Val .
    subsort Nat < Locator .
    subsort Loc < Locator .

    sorts Field .
    subsort Field < Val .

    sort Revert .
    subsort Revert < Val .

    sort LocatorVal .
    subsort LocatorVal < Val .

    op located : Loc List -> LocatorVal .

    op revert : -> Revert [ctor] .

    op nil : -> List [ctor] .
    op _,_ : List List -> List [ctor assoc id: nil] .

    op loc : Nat -> Loc [ctor] .

    op var_:_ : Qid Qid -> Locator [ctor] .
    op _._ : Locator Qid -> Locator [ctor] .
    op [_] : List -> Locator [ctor] .
    op {_} : Map -> Locator [ctor] .
    op _[_] : Locator Locator -> Locator [ctor] .

    op mt : -> Map .
    op _|->_ : Val List -> Map [ctor] .
    op __ : Map Map -> Map [assoc comm id: mt] .

    op <_;_;_;_> : Nat Map Map List -> Env [ctor] .
    op <_;_;_;_> : Nat Map Map Flow -> Env [ctor] .

    op _-->_ : Locator Locator -> Flow [ctor] .

    vars N N' M : Nat .
    vars L J K : Locator .
    vars l j k : Loc .
    vars X Y Z : Qid .
    vars V W V1 V2 : Val .
    vars Vs Ws Ls Ls1 Ls2 : List .
    vars Mu Mu' Rho Rho' Rho'' : Map .

    rl [lookup-var]:
        < N ; (X |-> l) Mu ; Rho ; X >
        =>
        < N ; (X |-> l) Mu ; (l |-> Vs) Rho ; located(l, Vs) > .

    rl [new-var]:
        < N ; Mu ; Rho ; var X : Y >
        =>
        < N + 1 ; (X |-> loc(N)) Mu ; (loc(N) |-> nil) Rho ; located(loc(N), nil) > .

    rl [nat-const]:
        < N ; Mu ; Rho ; M >
        =>
        < N + 1 ; Mu ; (loc(N) |-> M) Rho ; located(loc(N), M) > .

    crl [list-congr]:
        < N ; Mu ; Rho ; [ Ls1, L, Ls2 ] >
        =>
        < N' ; Mu' ; Rho' ; [ Ls1, J, Ls2] >
        if < N ; Mu ; Rho ; L > => < N' ; Mu' ; Rho' ; J >
        /\ L =/= J .

    op allLocated : List -> Bool .
    eq allLocated(nil) = true .
    eq allLocated(located(l, Vs), Ls) = allLocs(Ls) .
    eq allLocated(Ls) = false [owise] .

    crl [list-alloc]:
        < N ; Mu ; Rho ; [ Ls ] >
        =>
        < N + 1 ; Mu ; (loc(N) |-> Ls) Rho ; located(loc(N), Ls) >
        if allLocs(Ls) .

    crl [vals-congr-src]:
        < N ; Mu ; Rho ; L[K] >
        =>
        < N' ; Mu' ; Rho' ; J[K] >
        if < N ; Mu ; Rho ; L > => < N' ; Mu' ; Rho' ; J >
        /\ L =/= J .

    crl [vals-congr-sel]:
        < N ; Mu ; Rho ; L[K] >
        =>
        < N' ; Mu' ; Rho' ; L[J] >
        if < N ; Mu ; Rho ; K > => < N' ; Mu' ; Rho' ; J >
        /\ K =/= J .

    crl [vals]:
        < N ; Mu ; Rho ; l[k] >
        =>
        < N ; Mu ; Rho ; located(l, select(Rho, Vs, Ws)) >
        if (l |-> Vs) (k |-> Ws) Rho' := Rho .

    op select : Map List List -> List .
    eq select(Rho, Vs, nil) = nil .
    eq select(Rho, nil, (k, Ws)) = revert .
    eq select((j |-> V) (k |-> V) Rho, (Ls1, j, Ls2), (k, Ws)) =
        j, select((j |-> V) (k |-> V) Rho, (Ls1, Ls2), Ws) .
    eq select(Rho, Ls, (k, Ws)) = select(Rho, Ls, Ws) [owise] .

    op exec : Flow -> Env .
    rl exec(L --> K) => < 0 ; mt ; mt ; L --> K > .

    crl [flow-congr-src]:
        < N ; Mu ; Rho ; L --> K >
        =>
        < N' ; Mu' ; Rho' ; J --> K >
        if < N ; Mu ; Rho ; L > => < N' ; Mu' ; Rho' ; J >
        /\ L =/= J .

    crl [flow-congr-dst]:
        < N ; Mu ; Rho ; L --> K >
        =>
        < N' ; Mu' ; Rho' ; L --> J >
        if < N ; Mu ; Rho ; K > => < N' ; Mu' ; Rho' ; J >
        /\ K =/= J .
endm

--- rew exec(var 'x : 'nat) .
--- rew exec([ var 'x : 'nat ]) .
--- rew exec([ (var 'x : 'nat), var 'y : 'nat ]) .
--- rew exec([ 6, (var 'x : 'nat), var 'y : 'nat ]) .
--- set trace on .
--- set trace eq off .
rew exec([ 6, 3, 4][ [6,4] ] --> var 'y : 'listnat ) .


