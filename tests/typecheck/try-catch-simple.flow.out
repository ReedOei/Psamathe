  <generatedTop>
    <common>
      <k>
        .
      </k>
      <contracts>
        SetItem ( Main )
      </contracts>
      <fields>
        Main |-> .Set
      </fields>
      <constructors>
        Main |-> constructor ( .VarDefs , pass )
      </constructors>
      <functions>
        Main |-> .Set
      </functions>
      <types>
        Main |-> SetItem ( type ( Main , SetItem ( asset )
        SetItem ( consumable ) , Main ) )
        address |-> SetItem ( type ( address , SetItem ( consumable )
        SetItem ( nonfungible ) , address ) )
        bool |-> SetItem ( type ( bool , SetItem ( consumable )
        SetItem ( nonfungible ) , bool ) )
        nat |-> SetItem ( type ( nat , SetItem ( consumable )
        SetItem ( fungible ) , nat ) )
        string |-> SetItem ( type ( string , SetItem ( consumable )
        SetItem ( nonfungible ) , string ) )
      </types>
      <freshCounter>
        0
      </freshCounter>
    </common>
    <typeEnv>
      .Map
    </typeEnv>
  </generatedTop>
#And
  {
    ?Delta0
  #Equals
    x |-> ! string
  }
#And
  {
    ?Delta
  #Equals
    .Map
  }
#And
  {
    ?Gamma0
  #Equals
    .Map
  }
#And
  {
    ?Gamma1
  #Equals
    x |-> ! string
  }
#And
  {
    ?Gamma2
  #Equals
    x |-> ! string
  }
#And
  {
    ?Gamma3
  #Equals
    x |-> ! string
  }
#And
  {
    ?Gamma4
  #Equals
    x |-> ! string
  }
#And
  {
    ?Gamma
  #Equals
    .Map
  }
#And
  {
    ?Tau0
  #Equals
    ! string
  }
#And
  {
    ?Tau1
  #Equals
    ! string
  }
#And
  {
    ?Tau
  #Equals
    ! string
  }
#And
  {
    ?Xi0
  #Equals
    x |-> ! string
  }
#And
  {
    ?Xi
  #Equals
    .Map
  }
