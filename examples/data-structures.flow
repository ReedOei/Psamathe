// Want to be able to lookup Items by id OR by the name of the user who owns them

// Standard Solidity:
struct Item {
    uint256 id;
    uint256 price;
}

struct User {
    string name;
    Item[] items:
}

mapping (nat => Item) items;
mapping (string => User) users;
// Might even have more fields here, to allow for iteration over users/items

// Flow language version:
type Item is asset {
    id : nat,
    price : nat
}

type User is asset {
    name : string
}

// This is good if it just needs to be owned in one place, but we have to change our data structures to accomodate
items : linking User <=> set Item

// Alternate proposal
type Item is asset {
    id : nat,
    price : nat
}

type User is asset {
    name : string,
    items : set Item
}

users : set User
        identified by User.name

// Basically, the idea is that "held by" means that the values aren't actually "stored" here, but in some other field.
items : set Item
        held by users.items
        identified by User.name or Item.id

// Now we can do:

// User lookup
users[name]

// Item lookup by user name
items[name] : set Item

// Item lookup by item id
items[id] : Item

// User name lookup by item id
var name : string := holder of id in items

