type Bid is consumable asset {
    sender : address,
    value : ether
}

type Auction is asset {
    seller : address,
    maxBid : any Bid, // Here we use `any` to note that `maxBid` is possibly empty (kind of like "@Nullable")
    open : bool,
    // Here sender is a key for pendingReturns; not necessary, but makes it nicer to write, and theoretically improves performance
    pendingReturns : table(sender) Bid
}

transformer bid(this : Auction, bid : Bid) {
    only when this.open // Syntactic sugar for `this.open --[ true ]-> this.open`

    try {
        // Note: This will also fail if maxBid is empty
        only when bid.value > this.maxBid.value // Syntactic sugar for `bid.value --[ maxBid.value ]-> bid.value`

        this.maxBid --> this.pendingReturns[this.maxBid.sender]
        bid --> this.maxBid
    } catch {
        bid --> this.pendingReturns[bid.sender]
    }
}

transformer withdraw(this : Auction, sender : address) {
    this.pendingReturns[sender] --> var bids : table(sender) Bid
    bids.value --> sender.balance
    bids --> consume
}

// Same as above, but without pendingReturns
// Safe because:
// 1. Flows by default decrement before adding, so the maxBid becomes 0 **before** sending it to the maxBidder, so calling the function again doesn't actually do anything
//      a. Although in this case because you have to send more money than the maxBid to call the function anyway, not sure it really matters.
// 2. Reentrancy checking, if implemented as planned
type Bid is consumable asset {
    sender : address,
    value : ether
}

type Auction is asset {
    seller : address,
    maxBid : any Bid, // Here we use `any` to note that `maxBid` is possibly empty (kind of like "@Nullable")
    open : bool,
}

transformer bid(this : Auction, bid : Bid) {
    only when this.open // Syntactic sugar for `this.open --[ true ]-> this.open`

    try {
        // Note: This will also fail if maxBid is empty
        only when bid.value > this.maxBid.value // Syntactic sugar for `bid.value --[ maxBid.value ]-> bid.value`

        this.maxBid.value --> this.maxBid.sender
        bid --> this.maxBid
    } catch {
        bid.value --> bid.sender
        bid --> consume
    }
}

;

new Auction(me, 0, me, true) --> var auction : Auction

