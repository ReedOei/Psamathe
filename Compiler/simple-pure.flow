type Token is fungible asset nat

type Bid is {
    sender : one address,
    amount : any Token
}

transformer id(b : any bool) -> res : any bool {
    b --> res
}

// TODO: If we want to make the pure-flow language practical, we'll need to be able to optimize code like this
transformer invert(b : any bool) -> res : any bool {
    try {
        b --[ true ]-> res
    } catch {}
}

transformer transfer(balances : map address => nat, src : address, amount : nat, dst : address) {
    balances[src] --[ amount ]-> balances[dst]
}

transformer transferTok(balances : map address => Token, src : address, amount : nat, dst : address) {
    balances[src] --[ amount ]-> balances[dst]
}

1 --> var x : nat
4 --> var y : nat
x --> y

[] --> var m : map any nat => any nat
[ { key |-> 0, value |-> x } ] --> m

try {
    4 --> y
} catch {
    5 --> y
}

false --> var b : bool

[1,2,3] --> var nums : list nat

nums --[ [ any nat; 4 ] ]-> var dest : list nat

[4,5,6] --[ [ any nat; 4 ] ]-> dest

[true,false] --[ any such that id() ]-> var bs : list bool

y --[ 2 ]-> var z : nat

new Token(64) --> var myToks : Token

new Bid(0x0, 2) --> var myBid : Bid

[true,false] --> invert() --> var bs2 : list bool

