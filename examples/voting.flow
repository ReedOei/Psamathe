// Based on: https://github.com/WayneJz/COMP6452-19T1/blob/master/Assignment_1/contracts/message.sol

contract LunchVote {
    // These are "consumable" because we will self-destruct at the end, and consume all of these resources.
    // That's fine, because these don't really have any meaning outside of the contract, so there's no need to send them to other accounts
    consumable asset Voter is nonfungible address
    source newVoters of Voter

    consumable asset Lunch is nonfungible {
        // unique, autoincrement mean the same as in SQL
        // NOTE: The id field is actually never used, and could be removed.
        id stores nat [unique, autoincrement]
        name stores string [unique]
        voters stores many Voter
    }

    quorum stores nat
    voteAcceptedCount stores nat
    maxVote stores nat

    voteAcceptable stores bool

    contractCreator stores address
    lunchVotes stores many Lunch // Set[Lunch], Set Lunch, set Lunch, set of Lunch, Lunches
    voters stores many Voter

    on create(quorumSet : nat):
        voteAcceptable := true
        quorum := quorumSet
        voteAcceptedCount := 0
        maxVote := 0
        contractCreator := msg.sender
        flow msg.sender from newVoters to voters

    transaction choiceCreator(lunchChoicesAdd : many string):
        only when contractCreator = msg.sender then
            for each lunchChoice in lunchChoicesAdd,
                flow { name |-> lunchChoice,
                       votes |-> new V stores many Votes }
                from lunchSource to lunchVotes

    transaction authorizeVoter(newVoterAddress : address):
        only when contractCreator = msg.sender then
            // Because these addresses are nonfungible resources, we can't create them twice: sending a nonfungible resource twice is an error that will be caught in a precondition, just like sending more of a fungible token than you have in your account
            // This means we don't need to explicitly check if newVoterAddress is in voters already
            flow newVoterAddress from newVoters to voters

    view getChoices() of many string := { vote.name | vote in lunchVotes }

    view getResult() of (string, many (string, nat)) :=
        if not voteAcceptable then
            return ("Voting still in progress! You can only use 'getChoices' function.", {})
        else
            let winners stores many (string, nat) := { (lunch.name, total lunch.votes) | lunch in lunchVotes, total lunch.votes = maxVote }

            if total result > 1 then
                return ("The lunch vote has multiple tie winners:", winners)
            else
                return ("The winner is:", winners)

    transaction vote(voterChoice : string) returns string:
        only when voteAcceptable then
            // NOTE: Despite looking nondeterministic, this is okay because we declared that lunch names are unique, so if it exists, there's only one.
            // NOTE: We could even statically limit it's use to cases where we are guaranteed uniqueness by annotations (e.g., the condition only compares for equality on unique fields, maybe can generlize that somewhat?)
            // This is actually MORE safety than the original implementation, which allows inserting duplicate names, and would only let you vote on one of them.
            // This is appealingly declarative, at least to me; though it does complicate the language by these "selectors" in flows.
            // Could imagine a having a query optimizer here too, in the "enterprise edition"
            flow one lunch such that lunch.name = voterChoice from lunchVotes to new LunchChoice stores Lunch

            // Another version of the above, that doesn't require creating custom syntax beyond set comprehensions, which I already plan to include
            // However, the flow is less clear: does choose remove lunch from the list? If it doens't, what are the semantics of mutating it in place, and how can we guarantee that it's safe?
            // I prefer the above version, because it makes it clearer, I think: lunch is now owned by LunchChoice.
            // The typechecker will ensure that we deal with LunchChoice
            let lunch := choose({ lunch | lunch in lunchVotes, lunch.name = voterChoice })

            // This part onward is the same with both implementations
            flow msg.sender from voters to LunchChoice.votes

            maxVote := max(maxVote, total LunchChoice.votes)
            voteAcceptedCount := voteAcceptedCount + 1
            voteAcceptable := voteAcceptedCount >= quorum

            // It's probably possible to detect that we flow LunchChoice out of lunchVotes and then give it back immediately in
            // So then we can optimize and mutate it in place in the compiled code.
            // NOTE: We used `held by` here because LunchChoice is a "scalar" Lunch, but lunchVotes is a collection of Lunch
            LunchChoice held by lunchVotes

            return "Vote accepted."

    transaction deconstructor():
        only when msg.sender = contractCreator then
            merge this.balance into msg.sender.balance // Sends all resources from this to msg.sender
            consume everything from this
}

