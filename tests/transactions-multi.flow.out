<generatedTop>
  <common>
    <k>
      .
    </k>
    <contracts>
      Main |-> contract Main { balance : nat  transaction add ( n : nat , .VarDefs ) returns bool : n --[ everything ]-> this . balance return true  transaction remove ( m : nat , .VarDefs ) returns nat : var t : nat this . balance --[ m ]-> t return t  .Decls }
    </contracts>
    <fields>
      Main |-> SetItem ( balance : one nat )
    </fields>
    <constructors>
      Main |-> constructor ( .VarDefs , pass )
    </constructors>
    <transactions>
      Main . add |-> transaction ( bool , n : nat , .VarDefs , n --[ everything ]-> this . balance return true )
      Main . remove |-> transaction ( nat , m : nat , .VarDefs , var t : nat this . balance --[ m ]-> t return t )
    </transactions>
    <types>
      address |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , address )
      bool |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , bool )
      nat |-> modified ( SetItem ( consumable )
      SetItem ( fungible ) , nat )
      string |-> modified ( SetItem ( consumable )
      SetItem ( nonfungible ) , string )
    </types>
    <log>
      ListItem ( #ostream ( 1 ) )
      ListItem ( "on" )
      ListItem ( #buffer ( "" ) )
    </log>
  </common>
  <storage>
    loc ( 1 ) |-> resource ( one Main , balance |-> loc ( 4 ) )
    loc ( 2 ) |-> resource ( empty Main , emptySingleton )
    loc ( 4 ) |-> resource ( one nat , 40 )
  </storage>
  <lookup>
    freshStorage ( 3 ) |-> loc ( 2 )
    x |-> loc ( 1 )
  </lookup>
  <localTypeEnv>
    x |-> one Main
  </localTypeEnv>
  <currentContract>
    NoContract
  </currentContract>
  <activations>
    .Set
  </activations>
  <returnValueStack>
    .List
  </returnValueStack>
</generatedTop>
