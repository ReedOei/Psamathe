mod STREAMS is
    protecting NAT .
    protecting QID .
    protecting CONVERSION .

    sorts TyQuant Mode Ty BaseTy Expr Id Val MultisetVal Multiset .
    subsort Nat < TyQuant .
    subsort Val < Expr .
    subsort Val < MultisetVal < Multiset .
    subsort Expr < Multiset .
    subsort Id < Val .

    ops * oo : -> TyQuant [ctor] .
    ops asset nonasset : -> Mode [ctor] .

    op ___ : TyQuant Mode BaseTy -> Ty [ctor] .

    sorts TyVar TyQuantVar .
    subsort TyVar < BaseTy .
    subsort TyQuantVar < TyQuant .
    op v : Qid -> TyVar [ctor] .
    op q : Qid -> TyQuantVar [ctor] .

    op unit : -> BaseTy [ctor] .
    op iden : -> BaseTy [ctor] .
    op multiset_ : Ty -> BaseTy [ctor] .
    op _x_ : Ty Ty -> BaseTy [ctor] .
    op _->_ : Ty Ty -> BaseTy [ctor] .
    op forall_._ : TyVar Ty -> BaseTy [ctor] .
    op forall_._ : TyQuantVar Ty -> BaseTy [ctor] .

    subsort Qid < Expr .
    op Lambda_._ : TyVar Expr -> Val [ctor frozen] .
    op Lambda_._ : TyQuantVar Expr -> Val [ctor frozen] .
    op lambda_:_._ : Qid Ty Expr -> Val [ctor frozen] .

    op mt : -> MultisetVal [ctor] .
    op _,_ : MultisetVal MultisetVal -> MultisetVal [ctor comm assoc id: mt] .
    op _,_ : Multiset Multiset -> Multiset [ctor comm assoc id: mt] .
    op {_} : MultisetVal -> Val [ctor frozen] .
    op {_} : Multiset -> Expr [ctor frozen] .

    op id : Nat -> Id [ctor] .

    op [_;_] : Val Val -> Val [ctor frozen] .
    op [_;_] : Expr Expr -> Expr [ctor frozen] .

    op __ : Expr Expr -> Expr [ctor frozen] .
    op _@_ : Expr BaseTy -> Expr [ctor frozen] .
    op _@_ : Expr TyQuant -> Expr [ctor frozen] .

    ops zero fail : -> Val [ctor] .
    op sum : Expr -> Expr [ctor frozen] .
    op sub : Expr Expr -> Expr [ctor frozen] .

    op let[_:_;_:_]:=_in_ : Qid Ty Qid Ty Expr Expr -> Expr [ctor frozen] .
    op let[_:_]:=_in_ : Qid Ty Expr Expr -> Expr [ctor frozen] .

    op try{_}catch{_} : Expr Expr -> Expr [ctor frozen] .

    op assert_is_in_ : Expr TyQuant Expr -> Expr [ctor frozen] .
    op groupWith : TyQuant Expr Expr Expr -> Expr [ctor frozen] .
    ops copy label : Expr -> Expr [ctor frozen] .

    vars Q R Q1 Q2 Q3 Q4 : TyQuant .
    vars X Y Z A B : Qid .
    vars T S T1 T2 : BaseTy .
    vars Tau Sigma Pi Tau1 Tau2 Sigma1 Sigma2 : Ty .
    vars M M1 M2 M3 M4 : Mode .
    vars V W V1 V2 Left Right : Val .
    vars E F E1 E2 E3 E4 : Expr .
    vars Vs Ws Taken1 Taken2 Rest Rest1 Rest2 : Multiset .
    vars N N1 N2 : Nat .
    vars I J K L K1 K2 : Id .

    op demote : Ty -> Ty .
    eq demote(Q M T) = Q nonasset demoteBase(T) .

    op demoteBase : BaseTy -> BaseTy .
    eq demoteBase(unit) = unit .
    eq demoteBase(multiset Tau) = multiset demote(Tau) .
    eq demoteBase(Tau x Sigma) = demote(Tau) x demote(Sigma) .
    eq demoteBase(Tau -> Sigma) = demote(Tau) -> demote(Sigma) .

    op _elem_ : Qid Multiset -> Bool .
    eq X elem (X, Vs) = true .
    eq X elem Vs = false [owise] .

    op tyVarsOf : Ty -> Multiset .
    eq tyVarsOf(Q M T) = tyVarsOf(T) .
    op tyVarsOf : BaseTy -> Multiset .
    eq tyVarsOf(v(X)) = X .
    eq tyVarsOf(unit) = mt .
    eq tyVarsOf(iden) = mt .
    eq tyVarsOf(multiset Tau) = tyVarsOf(Tau) .
    eq tyVarsOf(Tau x Sigma) = tyVarsOf(Tau), tyVarsOf(Sigma) .
    eq tyVarsOf(Tau -> Sigma) = tyVarsOf(Tau), tyVarsOf(Sigma) .
    eq tyVarsOf(forall v(X) . Tau) = X, tyVarsOf(Tau) .
    eq tyVarsOf(forall q(X) . Tau) = tyVarsOf(Tau) .
    op tyVarsOf : Expr -> Multiset .
    eq tyVarsOf(X) = mt .
    eq tyVarsOf(lambda X : Tau . E1) = tyVarsOf(Tau), tyVarsOf(E1) .
    eq tyVarsOf(E1 E2) = tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf([E1 ; E2]) = tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf({ mt }) = mt .
    eq tyVarsOf({ E1 }) = tyVarsOf(E1) .
    eq tyVarsOf({ E1, E2, Vs }) = tyVarsOf(E1), tyVarsOf({E2, Vs}) .
    eq tyVarsOf(zero) = mt .
    eq tyVarsOf(fail) = mt .
    eq tyVarsOf(id(N)) = mt .
    eq tyVarsOf(sum(E)) = tyVarsOf(E) .
    eq tyVarsOf(sub(E1, E2)) = tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(let [ X : Tau ; Y : Sigma ] := E1 in E2) = tyVarsOf(Tau), tyVarsOf(Sigma), tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(let [ X : Tau ] := E1 in E2) = tyVarsOf(Tau), tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(try { E1 } catch { E2 }) = tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(assert E1 is Q in E2) = tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(groupWith(Q, F, E1, E2)) = tyVarsOf(F), tyVarsOf(E1), tyVarsOf(E2) .
    eq tyVarsOf(label(E)) = tyVarsOf(E) .
    eq tyVarsOf(copy(E)) = tyVarsOf(E) .
    eq tyVarsOf(E @ T) = tyVarsOf(E), tyVarsOf(T) .
    eq tyVarsOf(Lambda v(X) . E) = X, tyVarsOf(E) .
    eq tyVarsOf(E @ Q) = tyVarsOf(E) .
    eq tyVarsOf(Lambda q(X) . E) = tyVarsOf(E) .

    op tyQuantVarsOf : TyQuant -> Multiset .
    --- eq tyQuantVarsOf(q(X)) = X .
    eq tyQuantVarsOf(N) = mt .
    eq tyQuantVarsOf(*) = mt .
    eq tyQuantVarsOf(oo) = mt .
    op tyQuantVarsOf : Ty -> Multiset .
    eq tyQuantVarsOf(Q M T) = tyQuantVarsOf(Q), tyQuantVarsOf(T) .
    op tyQuantVarsOf : BaseTy -> Multiset .
    eq tyQuantVarsOf(v(X)) = mt .
    eq tyQuantVarsOf(unit) = mt .
    eq tyQuantVarsOf(iden) = mt .
    eq tyQuantVarsOf(multiset Tau) = tyQuantVarsOf(Tau) .
    eq tyQuantVarsOf(Tau x Sigma) = tyQuantVarsOf(Tau), tyQuantVarsOf(Sigma) .
    eq tyQuantVarsOf(Tau -> Sigma) = tyQuantVarsOf(Tau), tyQuantVarsOf(Sigma) .
    eq tyQuantVarsOf(forall v(X) . Tau) = tyQuantVarsOf(Tau) .
    eq tyQuantVarsOf(forall q(X) . Tau) = X, tyQuantVarsOf(Tau) .
    op tyQuantVarsOf : Expr -> Multiset .
    eq tyQuantVarsOf(X) = mt .
    eq tyQuantVarsOf(lambda X : Tau . E1) = tyQuantVarsOf(Tau), tyQuantVarsOf(E1) .
    eq tyQuantVarsOf(E1 E2) = tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf([E1 ; E2]) = tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf({ mt }) = mt .
    eq tyQuantVarsOf({ E1 }) = tyQuantVarsOf(E1) .
    eq tyQuantVarsOf({ E1, E2, Vs }) = tyQuantVarsOf(E1), tyQuantVarsOf({E2, Vs}) .
    eq tyQuantVarsOf(zero) = mt .
    eq tyQuantVarsOf(fail) = mt .
    eq tyQuantVarsOf(id(N)) = mt .
    eq tyQuantVarsOf(sum(E)) = tyQuantVarsOf(E) .
    eq tyQuantVarsOf(sub(E1, E2)) = tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(let [ X : Tau ; Y : Sigma ] := E1 in E2) = tyQuantVarsOf(Tau), tyQuantVarsOf(Sigma), tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(let [ X : Tau ] := E1 in E2) = tyQuantVarsOf(Tau), tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(try { E1 } catch { E2 }) = tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(assert E1 is Q in E2) = tyQuantVarsOf(Q), tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(groupWith(Q, F, E1, E2)) = tyQuantVarsOf(Q), tyQuantVarsOf(F), tyQuantVarsOf(E1), tyQuantVarsOf(E2) .
    eq tyQuantVarsOf(label(E)) = tyQuantVarsOf(E) .
    eq tyQuantVarsOf(copy(E)) = tyQuantVarsOf(E) .
    eq tyQuantVarsOf(E @ T) = tyQuantVarsOf(E), tyQuantVarsOf(T) .
    eq tyQuantVarsOf(Lambda v(X) . E) = tyQuantVarsOf(E) .
    eq tyQuantVarsOf(E @ Q) = tyQuantVarsOf(E), tyQuantVarsOf(Q) .
    eq tyQuantVarsOf(Lambda q(X) . E) = X, tyQuantVarsOf(E) .

    op freshVar : Multiset -> Qid .
    eq freshVar(Vs) = freshVar(0, '0, Vs) .
    op freshVar : Nat Qid Multiset -> Qid .
    eq freshVar(N, X, Vs) =
        if X elem Vs then
            freshVar(N + 1, qid(string(N + 1, 10)), Vs)
        else
            X
        fi .

    op varsOf : Expr -> Multiset .
    eq varsOf(X) = X .
    eq varsOf(lambda X : Tau . E1) = X, varsOf(E1) .
    eq varsOf(E1 E2) = varsOf(E1), varsOf(E2) .
    eq varsOf([E1 ; E2]) = varsOf(E1), varsOf(E2) .
    eq varsOf({ mt }) = mt .
    eq varsOf({ E1 }) = varsOf(E1) .
    eq varsOf({ E1, E2, Vs }) = varsOf(E1), varsOf({E2, Vs}) .
    eq varsOf(zero) = mt .
    eq varsOf(fail) = mt .
    eq varsOf(id(N)) = mt .
    eq varsOf(sum(E)) = varsOf(E) .
    eq varsOf(sub(E1, E2)) = varsOf(E1), varsOf(E2) .
    eq varsOf(let [ X : Tau ; Y : Sigma ] := E1 in E2) = X, Y, varsOf(E1), varsOf(E2) .
    eq varsOf(let [ X : Tau ] := E1 in E2) = X, varsOf(E1), varsOf(E2) .
    eq varsOf(try { E1 } catch { E2 }) = varsOf(E1), varsOf(E2) .
    eq varsOf(assert E1 is Q in E2) = varsOf(E1), varsOf(E2) .
    eq varsOf(groupWith(Q, F, E1, E2)) = varsOf(F), varsOf(E1), varsOf(E2) .
    eq varsOf(label(E)) = varsOf(E) .
    eq varsOf(copy(E)) = varsOf(E) .
    eq varsOf(E @ T) = varsOf(E) .
    eq varsOf(E @ Q) = varsOf(E) .
    eq varsOf(Lambda q(Y) . E) = varsOf(E) .
    eq varsOf(Lambda v(Y) . E) = varsOf(E) .

    op _[_/_] : Expr Expr Qid -> Expr .
    eq X[E / X] = E .
    eq X[E / Y] = X [owise] .
    ceq (lambda X : Tau . E1)[E / Y] = lambda X : Tau . (E1[E / Y])
        if not (X elem Y, varsOf(E)) .
    ceq (lambda X : Tau . E1)[E / Y] = lambda Z : Tau . (E1[Z / X][E / Y])
        if (X elem Y, varsOf(E)) /\
            Z := freshVar(varsOf(E1), X, Y, varsOf(E)) .
    eq zero[E / Y] = zero .
    eq fail[E / Y] = fail .
    eq id(N)[E / Y] = id(N) .
    eq [E1 ; E2][E / Y] = [E1[E / Y] ; E2[E / Y] ] .
    eq (E1 E2)[E / Y] = (E1[E / Y]) (E2[E / Y]) .
    eq { mt }[E / Y] = { mt } .
    eq { E1 }[E / Y] = { E1[E / Y] } .
    eq { E1, E2, Vs }[E / Y] = { (E1[E / Y]), (E2[E / Y]) } ++ ({ Vs }[E / Y]) .
    eq sum(E1)[E / Y] = sum(E1[E / Y]) .
    eq sub(E1, E2)[E / Y] = sub(E1[E / Y], E2[E / Y]) .
    ceq (let [ X : Tau ; Y : Sigma ] := E1 in E2)[E / Z] = let [ X : Tau ; Y : Sigma ] := E1[E / Z] in (E2[E / Z])
        if not(X elem (Z, varsOf(E))) /\
           not(Y elem (Z, varsOf(E))) .
    ceq (let [ X : Tau ; Y : Sigma ] := E1 in E2)[E / Z] = (let [ A : Tau ; Y : Sigma ] := E1 in (E2[A / X]))[E / Z]
        if X elem (Z, varsOf(E)) /\
           A := freshVar(Z, varsOf(E), X, Y, varsOf(E1), varsOf(E2)) .
    ceq (let [ X : Tau ; Y : Sigma ] := E1 in E2)[E / Z] = let [ X : Tau ; A : Sigma ] := E1[E / Z] in (E2[A / Y][E / Z])
        if not(X elem Z, varsOf(E)) /\
           Y elem Z, varsOf(E) /\
           A := freshVar(Z, varsOf(E), X, Y, varsOf(E1), varsOf(E2)) .

    ceq (let [ X : Tau ] := E1 in E2)[E / Y] = let [ X : Tau ] := E1[E / Y] in (E2[E / Y])
        if not(X elem Y, varsOf(E)) .
    ceq (let [ X : Tau ] := E1 in E2)[E / Y] = let [ Z : Tau ] := E1 in (E2[Z / X][E / Y])
        if X elem Y, varsOf(E) /\
           Z := freshVar(X, Y, varsOf(E1), varsOf(E2), varsOf(E)) .

    eq (try { E1 } catch { E2 })[E / Y] = try { E1[E / Y] } catch { E2[E / Y] } .
    eq (assert E1 is Q in E2)[E / Y] = assert (E1[E / Y]) is Q in (E2[E / Y]) .

    eq groupWith(Q, F, E1, E2)[E / Y] = groupWith(Q, F[E / Y], E1[E / Y], E2[E / Y]) .
    eq label(E1)[E / Y] = label(E1[E / Y]) .
    eq copy(E1)[E / Y] = copy(E1[E / Y]) .
    eq (E1 @ T)[E / Y] = (E1[E / Y]) @ T .
    eq (Lambda v(Y) . E1)[E / Y] = Lambda v(Y) . (E1[E / Y]) .
    eq (E1 @ Q)[E / Y] = (E1[E / Y]) @ Q .
    eq (Lambda q(Y) . E1)[E / Y] = Lambda q(Y) . (E1[E / Y]) .

    op _[_/_] : Ty BaseTy TyVar -> Ty .
    eq (Q M T1)[T2 / v(Y)] = Q M (T1[T2 / v(Y)]) .
    op _[_/_] : BaseTy BaseTy TyVar -> BaseTy .
    eq v(X)[T / v(X)] = T .
    eq v(X)[T / v(Y)] = v(X) [owise] .
    eq unit[T / v(X)] = unit .
    eq iden[T / v(X)] = unit .
    eq (multiset Tau)[T / v(X)] = multiset (Tau[T / v(X)]) .
    eq (Tau x Sigma)[T / v(X)] = (Tau[T / v(X)]) x (Sigma[T / v(X)]) .
    eq (Tau -> Sigma)[T / v(X)] = (Tau[T / v(X)]) -> (Sigma[T / v(X)]) .
    ceq (forall v(X) . Tau)[T / v(Y)] = forall v(X) . (Tau[T / v(X)])
        if not(X elem Y, tyVarsOf(T)) .
    ceq (forall v(X) . Tau)[T / v(Y)] = forall v(Z) . (Tau[v(Z) / v(X)][T / v(X)])
        if X elem Y, tyVarsOf(T) /\
           Z := freshVar(tyVarsOf(Tau), X, Y, tyVarsOf(T)) .
    op _[_/_] : Expr BaseTy TyVar -> Expr .
    eq X[T / v(Y)] = X .
    eq (lambda X : Tau . E1)[T / v(Y)] = lambda X : (Tau[T / v(Y)]) . (E1[T / v(Y)]) .
    eq zero[T / v(Y)] = zero .
    eq fail[T / v(Y)] = fail .
    eq id(N)[T / v(Y)] = id(N) .
    eq [E1 ; E2][T / v(Y)] = [E1[T / v(Y)] ; E2[T / v(Y)] ] .
    eq (E1 E2)[T / v(Y)] = (E1[T / v(Y)]) (E2[T / v(Y)]) .
    eq { mt }[T / v(Y)] = { mt } .
    eq { E1 }[T / v(Y)] = { E1[T / v(Y)] } .
    eq { E1, E2, Vs }[T / v(Y)] = { (E1[T / v(Y)]), (E2[T / v(Y)]) } ++ ({ Vs }[T / v(Y)]) .
    eq sum(E1)[T / v(Y)] = sum(E1[T / v(Y)]) .
    eq sub(E1, E2)[T / v(Y)] = sub(E1[T / v(Y)], E2[T / v(Y)]) .
    eq (let [ X : Tau ; Y : Sigma ] := E1 in E2)[T / v(Z)] = let [ X : Tau ; Y : Sigma ] := E1[T / v(Z)] in (E2[T / v(Z)]) .
    eq (let [ X : Tau ] := E1 in E2)[T / v(Y)] = let [ X : Tau ] := E1[T / v(Y)] in (E2[T / v(Y)]) .
    eq (try { E1 } catch { E2 })[T / v(Y)] = try { E1[T / v(Y)] } catch { E2[T / v(Y)] } .
    eq (assert E1 is Q in E2)[T / v(Y)] = assert (E1[T / v(Y)]) is Q in (E2[T / v(Y)]) .
    eq groupWith(Q, F, E1, E2)[T / v(Y)] = groupWith(Q, F[T / v(Y)], E1[T / v(Y)], E2[T / v(Y)]) .
    eq label(E1)[T / v(Y)] = label(E1[T / v(Y)]) .
    eq copy(E1)[T / v(Y)] = copy(E1[T / v(Y)]) .
    eq (E1 @ T)[T1 / v(Y)] = (E1[T1 / v(Y)]) @ (T[T1 / v(Y)]) .
    ceq (Lambda v(X) . E1)[T / v(Y)] = Lambda v(X) . (E1[T / v(Y)])
        if not(X elem Y, tyVarsOf(T)) .
    ceq (Lambda v(X) . E1)[T / v(Y)] = Lambda v(Z) . (E1[v(Z) / v(X)][T / v(Y)])
        if X elem Y, tyVarsOf(T) /\
           Z := freshVar(X, Y, tyVarsOf(E1), tyVarsOf(T)) .
    eq (E1 @ Q)[T1 / v(Y)] = (E1[T1 / v(Y)]) @ Q .
    eq (Lambda q(X) . E1)[T / v(Y)] = Lambda q(X) . (E1[T / v(Y)]) .

    op _[_/_] : TyQuant TyQuant TyQuantVar -> TyQuant .
    eq q(X)[Q / q(X)] = Q .
    eq q(X)[Q / q(Y)] = q(X) [owise] .
    eq N[Q / q(Y)] = N .
    eq oo[Q / q(Y)] = oo .
    eq *[Q / q(Y)] = * .
    op _[_/_] : Ty TyQuant TyQuantVar -> Ty .
    eq (Q M T1)[R / q(Y)] = (Q[R / q(Y)]) M (T1[R / q(Y)]) .
    op _[_/_] : BaseTy TyQuant TyQuantVar -> BaseTy .
    eq v(X)[Q / q(X)] = v(X) .
    eq unit[Q / q(X)] = unit .
    eq iden[Q / q(X)] = unit .
    eq (multiset Tau)[Q / q(X)] = multiset (Tau[Q / q(X)]) .
    eq (Tau x Sigma)[Q / q(X)] = (Tau[Q / q(X)]) x (Sigma[Q / q(X)]) .
    eq (Tau -> Sigma)[Q / q(X)] = (Tau[Q / q(X)]) -> (Sigma[Q / q(X)]) .
    eq (forall v(X) . Tau)[Q / q(Y)] = forall v(X) . (Tau[Q / q(Y)]) .
    ceq (forall q(X) . Tau)[R / q(Y)] = forall q(X) . (Tau[R / q(X)])
        if not(X elem Y, tyQuantVarsOf(R)) .
    ceq (forall q(X) . Tau)[R / q(Y)] = forall q(Z) . (Tau[q(Z) / q(X)][R / q(X)])
        if X elem Y, tyQuantVarsOf(R) /\
           Z := freshVar(tyQuantVarsOf(Tau), X, Y, tyQuantVarsOf(R)) .
    op _[_/_] : Expr TyQuant TyQuantVar -> Expr .
    eq X[Q / q(Y)] = X .
    eq (lambda X : Tau . E1)[Q / q(Y)] = lambda X : (Tau[Q / q(Y)]) . (E1[Q / q(Y)]) .
    eq zero[Q / q(Y)] = zero .
    eq fail[Q / q(Y)] = fail .
    eq id(N)[Q / q(Y)] = id(N) .
    eq [E1 ; E2][Q / q(Y)] = [E1[Q / q(Y)] ; E2[Q / q(Y)] ] .
    eq (E1 E2)[Q / q(Y)] = (E1[Q / q(Y)]) (E2[Q / q(Y)]) .
    eq { mt }[Q / q(Y)] = { mt } .
    eq { E1 }[Q / q(Y)] = { E1[Q / q(Y)] } .
    eq { E1, E2, Vs }[Q / q(Y)] = { (E1[Q / q(Y)]), (E2[Q / q(Y)]) } ++ ({ Vs }[Q / q(Y)]) .
    eq sum(E1)[Q / q(Y)] = sum(E1[Q / q(Y)]) .
    eq sub(E1, E2)[Q / q(Y)] = sub(E1[Q / q(Y)], E2[Q / q(Y)]) .
    eq (let [ X : Tau ; Y : Sigma ] := E1 in E2)[Q / q(Z)] = let [ X : Tau ; Y : Sigma ] := E1[Q / q(Z)] in (E2[Q / q(Z)]) .
    eq (let [ X : Tau ] := E1 in E2)[Q / q(Y)] = let [ X : Tau ] := E1[Q / q(Y)] in (E2[Q / q(Y)]) .
    eq (try { E1 } catch { E2 })[Q / q(Y)] = try { E1[Q / q(Y)] } catch { E2[Q / q(Y)] } .
    eq (assert E1 is Q in E2)[R / q(Y)] = assert (E1[R / q(Y)]) is (Q[R / q(Y)]) in (E2[R / q(Y)]) .
    eq groupWith(Q, F, E1, E2)[R / q(Y)] = groupWith(Q[R / q(Y)], F[R / q(Y)], E1[R / q(Y)], E2[R / q(Y)]) .
    eq label(E1)[R / q(Y)] = label(E1[R / q(Y)]) .
    eq copy(E1)[R / q(Y)] = copy(E1[R / q(Y)]) .
    eq (E1 @ T)[Q / q(Y)] = (E1[Q / q(Y)]) @ (T[Q / q(Y)]) .
    eq (Lambda v(X) . E1)[Q / q(Y)] = Lambda v(X) . (E1[Q / q(Y)]) .
    ceq (Lambda q(X) . E1)[Q / q(Y)] = Lambda q(X) . (E1[Q / q(Y)])
        if not(X elem Y, tyQuantVarsOf(Q)) .
    ceq (Lambda q(X) . E1)[Q / q(Y)] = Lambda q(Z) . (E1[q(Z) / q(X)][Q / q(Y)])
        if X elem Y, tyQuantVarsOf(Q) /\
           Z := freshVar(X, Y, tyQuantVarsOf(E1), tyQuantVarsOf(Q)) .
    eq (E1 @ Q)[R / q(Y)] = (E1[R / q(Y)]) @ (Q[R / q(Y)]) .

    sorts TyEnv TyRes TyCheck .
    subsort TyEnv < TyCheck .
    op nil : -> TyEnv [ctor] .
    op _:_ : Qid Ty -> TyEnv [ctor] .
    op _;_ : TyEnv TyEnv -> TyEnv [ctor comm assoc id: nil] .

    op _|-_:_ : TyEnv Expr Ty -> TyCheck [frozen] .

    vars Gamma Delta Xi Gamma1 Gamma2 : TyEnv .

    rl Gamma |- id(N) : 1 nonasset iden => Gamma .
    rl (Gamma ; X : Q M T) |- X : Q M T =>
        if Q == oo then
            (Gamma ; X : Q M T)
        else
            Gamma
        fi .

    crl Gamma |- copy(E) : Tau => Gamma
        if Gamma |- E => Sigma -| Delta /\
           Tau == demote(Sigma) .

    crl Gamma |- (Lambda q(Y) . E) : 1 asset (forall q(Y) . Tau) => Delta
        if Gamma |- E : Tau => Delta .
    crl Gamma |- (Lambda q(Y) . E) : oo nonasset (forall q(Y) . Tau) => Gamma
        if nil |- E : Tau => Delta .

    crl Gamma |- (Lambda v(Y) . E) : 1 asset (forall v(Y) . Tau) => Delta
        if Gamma |- E : Tau => Delta .
    crl Gamma |- (Lambda v(Y) . E) : oo nonasset (forall v(Y) . Tau) => Gamma
        if nil |- E : Tau => Delta .

    crl Gamma |- E @ T : Tau => Delta
        if Gamma |- E => Q M (forall v(Y) . Sigma) -| Delta /\
           Tau == Sigma[T / v(Y)] .
    crl Gamma |- E @ Q : Tau => Delta
        if Gamma |- E => R M (forall q(Y) . Sigma) -| Delta /\
           Tau == Sigma[Q / q(Y)] .

    op _++_ : TyQuant TyQuant -> TyQuant [comm assoc] .
    eq 0 ++ Q = Q .
    eq * ++ Q = * .
    eq oo ++ Q = oo .
    eq N1 ++ N2 = N1 + N2 .

    rl Gamma |- {mt} : 0 M multiset Tau => Gamma .
    crl Gamma |- {E, Rest} : Q M multiset Tau => Xi
        if Gamma |- E : Tau => Delta /\
           Delta |- {Rest} : | {Rest} | M multiset Tau => Xi /\
            | {E, Rest} | <: Q .

    op _<:_ : TyQuant TyQuant -> Bool .
    eq Q <: * = true .
    eq Q <: Q = true .

    op _\/_ : Mode Mode -> Mode [comm assoc id: nonasset] .

    crl Gamma |- [ E1 ; E2 ] : 1 M (Q1 M1 T1 x Q2 M2 T2) => Xi
        if Gamma |- E1 : Q1 M1 T1 => Delta /\
           Delta |- E2 : Q2 M2 T2 => Xi /\
           M == M1 \/ M2 .

    crl Gamma |- E1 E2 : Sigma => Xi
        if Gamma |- E1 => Q M (Tau -> Sigma) -| Delta /\
           Delta |- E2 : Tau => Xi .

    --- TODO: Ensure T is a Resource type
    rl Gamma |- zero : 0 M T => Gamma .

    rl Gamma |- fail : Tau => Gamma .

    --- TODO: We need to add a check for resources
    crl Gamma |- sum(E) : Tau => Delta
        if Gamma |- E : * asset multiset Tau => Delta .

    crl Gamma |- sub(E1, E2) : Tau => Xi
        if Gamma |- E1 : Tau => Delta /\
           Delta |- E2 : Tau => Xi .

    --- TODO: Need to make sure this is right...and that we can drop the resources.
    crl Gamma |- (lambda X : Tau . E) : 1 asset (Tau -> Sigma) => Delta
        if (Gamma ; X : Tau) |- E : Sigma => Delta .
    crl Gamma |- (lambda X : Tau . E) : oo nonasset (Tau -> Sigma) => Gamma
        if (X : Tau) |- E : Sigma => Delta .

    op joinEnv : TyEnv TyEnv -> TyEnv [comm assoc id: nil] .
    crl Gamma |- try { E1 } catch { E2 } : Tau => joinEnv(Delta, Xi)
        if Gamma |- E1 : Tau => Delta /\
           Gamma |- E2 : Tau => Xi .

    crl Gamma |- label(E) : Q M multiset (1 M2 (1 nonasset iden x (Q2 M2 T))) => Delta
        if Gamma |- E : Q M multiset (Q2 M2 T) => Delta .

    crl (Gamma ; X : Q2 M T) |- assert X is Q in E : Tau => Delta
        if (Gamma ; X : Q M T) |- E : Tau => Delta .

    --- TODO: Need to drop the variables
    crl Gamma |- let [ X : Tau ; Y : Sigma ] := E1 in E2 : Pi => Xi
        if Gamma |- E1 : 1 asset (Tau x Sigma) => Delta /\
           (Delta ; (X : Tau) ; (Y : Sigma)) |- E2 : Pi => Xi .

    crl Gamma |- let [ X : Tau ] := E1 in E2 : Sigma => Xi
        if Gamma |- E1 : * asset multiset Tau => Delta /\
           (Delta ; X : Tau) |- E2 : Sigma => Xi .

    crl Gamma |- groupWith(Q, F, E1, E2) : Q M (multiset (R M T)) => Gamma1
        if Gamma |- groupWith(Q, F, E1, E2) => Q M (multiset (R M T)) -| Gamma1 .

    --- ===================================
    --- Algorithmic typing
    --- ===================================
    op _-|_ : Ty TyEnv -> TyRes [ctor frozen] .
    op _|-_ : TyEnv Expr -> TyRes [frozen] .

    rl Gamma |- id(N) => 1 nonasset iden -| Gamma .
    rl (Gamma ; X : Q M T) |- X =>
        if Q == oo then
            (Q M T) -| (Gamma ; X : Q M T)
        else
            (Q M T) -| Gamma
        fi .

    crl Gamma |- copy(E) => demote(Tau) -| Gamma
        if Gamma |- E => Tau -| Delta .

    op checkEach : TyEnv Multiset -> TyRes .
    op checkEach : TyEnv Multiset Ty -> TyRes .
    rl checkEach(Gamma, mt, Tau) => Tau -| Gamma .
    crl checkEach(Gamma, (E, Rest), Tau) => checkEach(Delta, Rest, Tau)
        if Gamma |- E => Tau -| Delta .
    crl checkEach(Gamma, (E, Rest)) => checkEach(Delta, Rest, Tau)
        if Gamma |- E => Tau -| Delta .
    crl Gamma |- { Vs } => | Vs | M multiset (Q M T) -| Delta
        if checkEach(Gamma, Vs) => Q M T -| Delta .

    crl Gamma |- [ E1 ; E2 ] => 1 (M1 \/ M2) (Q1 M1 T1 x Q2 M2 T2) -| Xi
        if Gamma |- E1 => Q1 M1 T1 -| Delta /\
           Delta |- E2 => Q2 M2 T2 -| Xi .

    crl Gamma |- E1 E2 => Sigma -| Xi
        if Gamma |- E1 => Q M (Tau -> Sigma) -| Delta /\
           Delta |- E2 : Tau => Xi .

    --- TODO: We need to add a check for resources
    crl Gamma |- sum(E) => Tau -| Delta
        if Gamma |- E => Q M multiset Tau -| Delta .

    crl Gamma |- sub(E1, E2) => Tau -| Xi
        if Gamma |- E1 => Tau -| Delta /\
           Delta |- E2 : Tau => Xi .

    --- TODO: Need to make sure this is right...and that we can drop the resources.
    crl Gamma |- (lambda X : Tau . E) => 1 asset (Tau -> Sigma) -| Delta
        if (Gamma ; X : Tau) |- E => Sigma -| Delta .
    crl Gamma |- (lambda X : Tau . E) => oo nonasset (Tau -> Sigma) -| Gamma
        if (X : Tau) |- E => Sigma -| Delta .

    crl Gamma |- try { E1 } catch { E2 } => Tau -| joinEnv(Delta, Xi)
        if Gamma |- E1 => Tau -| Delta /\
           Gamma |- E2 : Tau => Xi .

    crl Gamma |- label(E) => Q M multiset (1 M2 (1 nonasset iden x (Q2 M2 T))) -| Delta
        if Gamma |- E => Q M multiset (Q2 M2 T) -| Delta .

    crl (Gamma ; X : Q2 M T) |- assert X is Q in E => Tau -| Delta
        if (Gamma ; X : Q M T) |- E => Tau -| Delta .

    --- TODO: Need to drop the variables
    crl Gamma |- let [ X : Tau ; Y : Sigma ] := E1 in E2 => Pi -| Xi
        if Gamma |- E1 : 1 asset (Tau x Sigma) => Delta /\
           (Delta ; (X : Tau) ; (Y : Sigma)) |- E2 => Pi -| Xi .

    crl Gamma |- let [ X : Tau ] := E1 in E2 => Sigma -| Xi
        if Gamma |- E1 : * asset multiset Tau => Delta /\
           (Delta ; X : Tau) |- E2 => Sigma -| Xi .

    crl Gamma |- groupWith(Q, F, E1, E2) => Q M (multiset (R M T)) -| Gamma1
        --- TODO: Need to ensure that Tau has decidable equality
        if Gamma |- F => oo nonasset (1 M2 (Tau x Q3 (M2 \/ M4) (Sigma x Pi)) -> R M T) -| Delta /\
           Delta |- E1 => Q1 M1 (multiset (1 M2 (Tau x Sigma))) -| Xi /\
           Xi |- E2 => Q2 M3 (multiset (1 M4 (Tau x Pi))) -| Gamma1 .

    op unpackSingleton : Qid Expr Expr -> Expr .
    eq unpackSingleton(X, { E }, E2) = E2[E / X] .
    eq unpackSingleton(X, E, E2) = fail [owise] .

    op applyLabels : Nat Multiset -> Multiset .
    eq applyLabels(N, mt) = mt .
    eq applyLabels(N, (V, Vs)) = [ id(N) ; V ], applyLabels(N + 1, Vs) .

    op _++_ : Val Val -> Val [comm assoc] .
    eq { Vs } ++ { Ws } = { Vs, Ws } .
    eq [ V ; W ] ++ [ V1 ; V2 ] = [ V ++ V1 ; W ++ V2 ] .
    eq zero ++ V = V .
    eq fail ++ V = fail .

    op calculateSum : MultisetVal -> Val .
    eq calculateSum(mt) = zero .
    eq calculateSum(V, Vs) = V ++ calculateSum(Vs) .

    op |_| : Expr -> Nat .
    eq |{ mt }| = 0 .
    eq |{ E, Vs }| = 1 + | { Vs } | .
    eq | [ E1 ; E2 ] | = 1 .
    eq | zero | = 0 .

    op compatQuant : TyQuant Expr -> Bool .
    eq compatQuant(*, E) = true .
    eq compatQuant(N, E) = N == | E | .
    eq compatQuant(oo, lambda X : Tau . E) = true .
    eq compatQuant(Q, E) = false [owise] .

    op groupSize : MultisetVal MultisetVal -> Val .
    eq groupSize(Vs, mt) = [[{mt}; {mt}]; [{Vs}; {mt}]] .
    eq groupSize(mt, Vs) = [[{mt}; {mt}]; [{mt}; {Vs}]] .
    eq groupSize((V1, Vs), (V2, Ws)) = [[{V1}; {V2}]; [{mt}; {mt}]] ++ groupSize(Vs, Ws) .

    op partitionByKey : Val MultisetVal -> Val .
    eq partitionByKey(V, mt) = [ {mt} ; {mt} ] .
    eq partitionByKey(V, ([V ; V1], Rest)) = [{[V ; V1]}; {mt}] ++ partitionByKey(V, Rest) .
    eq partitionByKey(V, ([V1 ; V2], Rest)) = [{mt}; {[V1 ; V2]}] ++ partitionByKey(V, Rest) [owise] .

    op fsts : Multiset -> Multiset .
    eq fsts(mt) = mt .
    eq fsts([E1 ; E2], Rest) = E1, fsts(Rest) .
    op snds : Multiset -> Multiset .
    eq snds(mt) = mt .
    eq snds([E1 ; E2], Rest) = E2, snds(Rest) .

    vars G1 G2 G3 G4 : Multiset .
    op runGroupWith : TyQuant Val MultisetVal MultisetVal -> Multiset .
    eq runGroupWith(Q, F, mt, mt) = mt .
    ceq runGroupWith(Q, F, mt, ([V ; E], Rest)) = (F [V ; [{mt}; {snds(Vs)}]]), runGroupWith(Q, F, mt, Ws)
        if [{Vs} ; {Ws}] := partitionByKey(V, ([V ; E], Rest)) .
    ceq runGroupWith(Q, F, ([V ; E], Vs), Ws) =
        if Taken2 == mt then
            (F [V ; [{snds(Taken1)}; {mt}]]), runGroupWith(Q, F, Rest1, Rest2)
        else
            (F [V ; [{snds(G1)}; {snds(G2)}]]), runGroupWith(Q, F, (G3, Rest1), (G4, Rest2))
        fi

        if [{Taken1} ; {Rest1}] := partitionByKey(V, ([V ; E], Vs)) /\
           [{Taken2} ; {Rest2}] := partitionByKey(V, Ws) /\
           [[{G1}; {G2}]; [{G3}; {G4}]] := groupSize(Taken1, Taken2) .

    rl copy(E) => E .

    crl [E1 ; E2] => [V1 ; E2]
        if E1 => V1 /\ V1 =/= E1 .
    crl [V1 ; E2] => [V1 ; V2]
        if E2 => V2 /\ V2 =/= E2 .

    crl let [ X : Tau ; Y : Sigma ] := E in E2 => E2[Left / X][Right / Y]
        if E => [ Left ; Right ] .
    crl let [ X : Tau ] := E1 in E2 => unpackSingleton(X, V, E2)
        if E1 => V .

    crl E1 E2 => E[V / X]
        if E1 => (lambda X : Tau . E) /\
           E2 => V .

    crl { E, Vs } => { V, Vs }
        if E => V /\ E =/= V .

    rl { fail, Vs } => fail .

    crl label(E1) => { applyLabels(0, Vs) }
        if E1 => { Vs } .

    crl try { E1 } catch { E2 } => if E1 == fail then E2 else E fi
        if E1 => E .

    crl sum(E1) => calculateSum(Vals:MultisetVal)
        if E1 => { Vals:MultisetVal } .

    crl assert E1 is Q in E2 =>
        if compatQuant(Q, E) then
            E2
        else
            fail
        fi

        if E1 => E .

    crl groupWith(Q, F, E1, E2) => { runGroupWith(Q, (lambda X : Tau . E), Vs, Ws) }
        if F => (lambda X : Tau . E) /\
           E1 => { Vs } /\
           E2 => { Ws } .

    crl sub(E1, E2) => V1 -- V2
        if E1 => V1 /\ E2 => V2 .

    op _--_ : Val Val -> Val .
    eq V -- zero = V .

    ops map splitWith unzip : -> Val .
    eq map = lambda 'params : * nonasset unit .
        (let ['f : * nonasset unit ; 'xs : * nonasset unit ] := 'params in groupWith(*,
                     lambda 'input : * nonasset unit .
                        (let ['k : * nonasset unit ; 'rest : * nonasset unit ] := 'input in
                         let ['left : * nonasset unit ; 'right : * nonasset unit ] := 'rest in
                         let ['head : * nonasset unit ] := 'left in
                         ('f 'head)), label('xs), {mt})) .
    eq splitWith = lambda 'params : * nonasset unit .
        let ['f : * nonasset unit ; 'xs : * nonasset unit ] := 'params in sum(map ['f ; 'xs]) .
    eq unzip = lambda 'xs : * nonasset unit . (splitWith [ unzipPair ; 'xs ]) .

    ops unzipPair snd fst : -> Val .
    eq unzipPair = lambda 'pair : * nonasset unit .
        let ['x : * nonasset unit ; 'y : * nonasset unit ] := 'pair in [{'x}; {'y}] .
    eq fst = lambda 'pair : * nonasset unit .
        let ['left : * nonasset unit ; 'right : * nonasset unit ] := 'pair in 'left .
    eq snd = lambda 'pair : * nonasset unit .
        let ['left : * nonasset unit ; 'right : * nonasset unit ] := 'pair in 'right .

    op splitKey : -> Val .
    eq splitKey = lambda 'params : * nonasset unit .
                    let ['k : * nonasset unit ; 'pair : * nonasset unit ] := 'params in
                    let ['left : * nonasset unit ; 'right : * nonasset unit ] := 'pair in
                    [{['k ; 'left]} ; {['k ; 'right]}] .

    op groupComponents : -> Val .
    eq groupComponents = lambda 'params : * nonasset unit .
                            let ['k : * nonasset unit ; 'pairs : * nonasset unit ] := 'params in
                            let ['xs : * nonasset unit ; 'ys : * nonasset unit ] := 'pairs in
                            ['k ; [sum('xs) ; sum('ys)]] .

    ops selectFst selectSnd : -> Val .
    eq selectFst = lambda 'valsF : * nonasset unit .
                    let ['vals : * nonasset unit ; 'f : * nonasset unit ] := 'valsF in
                    let ['fsts : * nonasset unit ; 'snds : * nonasset unit ] := splitWith [splitKey ; 'vals] in
                    let ['ret : * nonasset unit ; 'sel : * nonasset unit ] := 'f 'fsts in
                    [groupWith(*, groupComponents, 'ret, 'snds); 'sel] .
    eq selectSnd = lambda 'valsF : * nonasset unit .
                    let ['vals : * nonasset unit ; 'f : * nonasset unit] := 'valsF in
                    let ['fsts : * nonasset unit ; 'snds : * nonasset unit] := splitWith [splitKey ; 'vals] in
                    let ['ret : * nonasset unit ; 'sel : * nonasset unit] := 'f 'snds in
                    [groupWith(*, groupComponents, 'fsts, 'ret); 'sel] .

    ops takeAll combine : -> Val .
    eq takeAll = lambda 'taggedVals : * nonasset unit . [{mt} ; map [snd ; 'taggedVals]] .
    eq combine = lambda 'toAdd : * nonasset unit . lambda 'takenVals : * nonasset unit .
                    let ['kv : * nonasset unit] := 'takenVals in
                    let ['key : * nonasset unit ; 'val : * nonasset unit] := 'kv in
                    [{['key ; sum({'val, 'toAdd})]}; {mt}] .

    op compose : -> Val .
    eq compose = lambda 'locs : * nonasset unit .
                    let ['f : * nonasset unit ; 'g : * nonasset unit] := 'locs in
                    (lambda 'valsK : * nonasset unit .
                        let ['vals : * nonasset unit ; 'k : * nonasset unit] := 'valsK in
                        ('f ['vals ; (lambda 'taggedVals : * nonasset unit . ('g ['taggedVals ; 'k]))])) .

    op flow : -> Val .
    eq flow = lambda 'locs : * nonasset unit .
                let ['src : * nonasset unit ; 'dst : * nonasset unit] := 'locs in
                (lambda 'valsK : * nonasset unit .
                    let ['vals : * nonasset unit ; 'k : * nonasset unit] := 'valsK in
                    let ['ret : * nonasset unit ; 'sel : * nonasset unit] := 'src ['vals ; takeAll] in
                    let ['ret2 : * nonasset unit ; 'sel2 : * nonasset unit] := 'dst ['ret ; (combine sum('sel)) ] in
                    ('k 'ret2)) .

    ops runLocator runDestination : -> Val .
    eq runLocator = (lambda 'params : * nonasset unit .
                        let ['vals : * nonasset unit ; 'loc : * nonasset unit] := 'params in
                        let ['taggedRet : * nonasset unit ; 'sel : * nonasset unit] := 'loc [label('vals); takeAll] in
                        [map [snd ; 'taggedRet ]; 'sel]) .

    op wrapSingleton : -> Val .
    eq wrapSingleton = lambda 'pair : * nonasset unit .
        let ['k : * nonasset unit ; 'b : * nonasset unit] := 'pair in ['k ; {'b}] .

    op unwrapSingleton : -> Val .
    eq unwrapSingleton = lambda 'pair : * nonasset unit .
                            let ['k : * nonasset unit ; 'bs : * nonasset unit] := 'pair in
                            try { let ['b : * nonasset unit] := 'bs in ['k ; 'b] } catch { ['k ; zero] } .

    op eachK : -> Val .
    eq eachK = lambda 'g : * nonasset unit . lambda 'transformed : * nonasset unit .
                let ['ret : * nonasset unit ; 'sel : * nonasset unit] := 'g (map [wrapSingleton ; 'transformed]) in
                [ map [unwrapSingleton ; 'ret]; 'sel ] .

    op indexKey : -> Val .
    eq indexKey = lambda 'k : * nonasset unit . lambda 'idxVal : * nonasset unit .
                    let ['idx : * nonasset unit ; 'val : * nonasset unit] := 'idxVal in
                    [[ 'idx ; 'k ] ; 'val ] .

    op unindexKey : -> Val .
    eq unindexKey = lambda 'params : * nonasset unit .
                        let ['idxKey : * nonasset unit ; 'val : * nonasset unit] := 'params in
                        let ['idx : * nonasset unit ; 'key : * nonasset unit] := 'idxKey in
                        ['key ; ['idx ; 'val]] .

    op distributeKeys : -> Val .
    eq distributeKeys = lambda 'params : * nonasset unit .
                            let ['k : * nonasset unit ; 'vals : * nonasset unit] := 'params in
                            (map [indexKey 'k ; label('vals)]) .

    op sumSnds : -> Val .
    eq sumSnds = lambda 'params : * nonasset unit .
                    let ['k : * nonasset unit ; 'pairs : * nonasset unit] := 'params in
                    let ['xs : * nonasset unit ; 'ys : * nonasset unit] := 'pairs in
                    ['k ; sum('ys)] .

    op groupByIdx : -> Val .
    eq groupByIdx = lambda 'params : * nonasset unit .
                        let ['k : * nonasset unit ; 'pairs : * nonasset unit ] := 'params in
                        let ['xs : * nonasset unit ; 'ys : * nonasset unit ] := 'pairs in
                        ['k ; groupWith(*, sumSnds, 'xs, 'ys)] .

    op dropIdx : -> Val .
    eq dropIdx = lambda 'params : * nonasset unit .
                    let ['k : * nonasset unit ; 'idxVals : * nonasset unit ] := 'params in
                    ['k ; map [snd ; 'idxVals ]] .

    op each : -> Val .
    eq each = lambda 'f : * nonasset unit .
                lambda 'listsG : * nonasset unit .
                    let ['lists : * nonasset unit ; 'g : * nonasset unit] := 'listsG in
                    let ['ret : * nonasset unit ; 'sel : * nonasset unit] := 'f [sum(map [distributeKeys ; 'lists]) ; eachK 'g ] in
                    --- [map [dropIdx ; groupWith(*, groupByIdx, {mt}, map [unindexKey ; 'ret])] ; 'sel] .
                    [groupWith(*, sumSnds, {mt}, map [dropIdx ; groupWith(*, groupByIdx, {mt}, map [unindexKey ; 'ret])]); 'sel] .
endm

rew nil |- label({zero}) : * nonasset multiset (1 nonasset (1 nonasset iden x 0 nonasset unit)) .
rew nil |- sum({ { zero }, { zero, zero } }) : * nonasset multiset (0 nonasset unit) .

rew nil |- (Lambda q('q). Lambda v('a) . lambda 'x : q('q) asset v('a) . 'x)
        : oo nonasset (forall q('q) . oo nonasset (forall v('a) . oo nonasset (q('q) asset v('a) -> q('q) asset v('a)))) .

set trace on .
set trace eq off .
rew nil |- (Lambda q('q). Lambda v('a) . Lambda q('r). Lambda v('b) . lambda 'pair : 1 asset (q('q) asset v('a) x q('r) asset v('b)) .
                let ['left : q('q) asset v('a) ; 'right : q('r) asset v('b) ] := 'pair in 'left)
            : oo nonasset (forall q('q). oo nonasset (forall v('a) . oo nonasset (forall q('r). oo nonasset (forall v('b) . oo nonasset (1 asset (* asset v('a) x * asset v('b)) -> * asset v('a)))))) .

--- set profile on .
--- set clear profile off .
--- red [ { zero, zero } ; { zero, zero } ] .
--- red let [ 'x ; 'y ] := [ zero ; zero ] in zero .

--- red demote(* asset multiset (1 asset multiset (oo asset (1 nonasset unit x 1 asset unit)))) .

--- rew let [ 'x ; 'y ] := [ zero ; zero ] in 'x .

--- rew let [ 'x ] := { zero } in 'x .
--- rew let [ 'x ] := { zero, zero } in 'x .

--- rew { (let [ 'x ] := { zero, zero } in 'x) , zero } .
--- rew { (let [ 'x ] := { zero } in 'x) , zero } .

--- rew label({ zero, zero, zero }) .

--- rew try { fail } catch { {zero, zero} } .

--- rew sum({ { zero }, { zero, zero } }) .

--- rew unzip label({ { zero }, { zero, zero }}) .

--- rew selectFst [label({[zero ; zero]}); takeAll] .
--- rew runLocator [{[{zero, zero} ; zero]}; selectFst] .
--- rew runLocator [{[{zero, zero} ; zero]}; selectSnd] .

--- rew selectFst [label({[{zero,zero} ; zero]}) ; takeAll] .

--- rew (flow [selectFst ; selectSnd]) [label({[{zero,zero} ; zero]}); takeAll] .

--- rew runLocator [{[id(4) ; zero], [id(5) ; zero], [id(6) ; zero]}; selectFst] .
--- rew runLocator [{[[id(1) ; id(6)] ; id(2)]} ; compose [selectFst ; selectSnd]] .

--- rew runLocator [{{[id(4) ; zero], [id(5) ; zero]}, {[id(6) ; zero]}}; each selectFst] .

